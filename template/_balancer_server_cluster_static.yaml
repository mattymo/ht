heat_template_version: 2015-10-15

description: Server cluster(3 node static) with LoadBalancer

parameters:
  admin_net:
    type: string
  private_net:
    type: string
  public_net:
    type: string
  security_group:
    type: string
  key_pair:
    type: string
  config_host:
    type: string
  instance_flavor:
    type: string
  instance_image:
    type: string
  instance_zone:
    type: string
  instance_os:
    type: string
  instance_vip_address:
    type: string
  instance01_name:
    type: string
  instance01_address:
    type: string
  instance02_name:
    type: string
  instance02_address:
    type: string
  instance03_name:
    type: string
  instance03_address:
    type: string
  public_vip_name:
    type: string
  lb_port:
    default: '443'
    type: string

resources:
  instance01:
    type: MCP::StaticClusterMember
    properties:
      admin_net: { get_param: admin_net }
      private_net: { get_param: private_net }
      key_pair: { get_param: key_pair }
      security_group: { get_param: security_group }
      config_host: { get_param: config_host }
      instance_os: { get_param: instance_os }
      instance_flavor: { get_param: instance_flavor }
      instance_image: { get_param: instance_image }
      instance_zone:  { get_param: instance_zone }
      instance_name: { get_param: instance01_name }
      instance_address: { get_param: instance01_address }
      instance_vip_address: { get_param: instance_vip_address }
  instance02:
    type: MCP::StaticClusterMember
    properties:
      admin_net: { get_param: admin_net }
      private_net: { get_param: private_net }
      key_pair: { get_param: key_pair }
      security_group: { get_param: security_group }
      config_host: { get_param: config_host }
      instance_os: { get_param: instance_os }
      instance_flavor: { get_param: instance_flavor }
      instance_image: { get_param: instance_image }
      instance_zone:  { get_param: instance_zone }
      instance_name: { get_param: instance02_name }
      instance_address: { get_param: instance02_address }
      instance_vip_address: { get_param: instance_vip_address }
  instance03:
    type: MCP::StaticClusterMember
    properties:
      admin_net: { get_param: admin_net }
      private_net: { get_param: private_net }
      key_pair: { get_param: key_pair }
      security_group: { get_param: security_group }
      config_host: { get_param: config_host }
      instance_os: { get_param: instance_os }
      instance_flavor: { get_param: instance_flavor }
      instance_image: { get_param: instance_image }
      instance_zone:  { get_param: instance_zone }
      instance_name: { get_param: instance03_name }
      instance_address: { get_param: instance03_address }
      instance_vip_address: { get_param: instance_vip_address }

  pool_member01:
    type: OS::Neutron::LBaaS::PoolMember
    properties:
      pool: { get_resource: pool }
      address: { get_attr: [instance01, instance_address] }
      protocol_port: { get_param: lb_port }
      subnet: { get_param: private_net }

  pool_member02:
    type: OS::Neutron::LBaaS::PoolMember
    properties:
      pool: { get_resource: pool }
      address: { get_attr: [instance02, instance_address] }
      protocol_port: { get_param: lb_port }
      subnet: { get_param: private_net }

  pool_member03:
    type: OS::Neutron::LBaaS::PoolMember
    properties:
      pool: { get_resource: pool }
      address: { get_attr: [instance03, instance_address] }
      protocol_port: { get_param: lb_port }
      subnet: { get_param: private_net }

  monitor:
    type: OS::Neutron::LBaaS::HealthMonitor
    properties:
      delay: 3
      type: HTTPS
      timeout: 3
      max_retries: 3
      pool: { get_resource: pool }

  pool:
    type: OS::Neutron::LBaaS::Pool
    properties:
      lb_algorithm: ROUND_ROBIN
      protocol: HTTPS
      listener: { get_resource: listener }

  listener:
    type: OS::Neutron::LBaaS::Listener
    properties:
      loadbalancer: { get_resource: loadbalancer }
      protocol: HTTPS
      protocol_port: { get_param: lb_port }

  loadbalancer:
    type: OS::Neutron::LBaaS::LoadBalancer
    properties:
      name: { get_param: public_vip_name }
      vip_subnet: { get_param: private_net }

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      port_id: { get_attr: [loadbalancer, vip_port_id ]}

outputs:
  kube_vip_public:
    value:
      str_replace:
        template: https://IP_ADDRESS:PORT
        params:
          IP_ADDRESS: { get_attr: [ floating_ip, floating_ip_address ] }
          PORT: { get_param: lb_port }
    description: "Public IP address of Kubernetes VIP"
